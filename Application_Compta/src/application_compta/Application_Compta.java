/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package application_compta;

import ProtocoleBISAMAP.*;
import static ProtocoleBISAMAP.RequeteBISAMAP.codeProvider;
import java.io.*;
import java.math.BigInteger;
import java.net.*;
import java.security.*;
import java.util.Date;
import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.table.DefaultTableModel;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

/**
 *
 * @author hector
 */
public class Application_Compta extends javax.swing.JFrame {
    
    private ObjectInputStream ois;
    private ObjectOutputStream oos;
    private Socket cliSock = null;
    private SecretKey cle = null;
    private SecretKey cle_hmac = null;
    
    /**
     * Creates new form Application_Compta
     */
    public Application_Compta() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        BConnexion = new javax.swing.JButton();
        BDeconnexion = new javax.swing.JButton();
        TFAdresse = new javax.swing.JTextField();
        TFPort = new javax.swing.JTextField();
        TFUser = new javax.swing.JTextField();
        TFPass = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TAReponse = new javax.swing.JTextArea();
        BGetNextBill = new javax.swing.JButton();
        BValidateBill = new javax.swing.JButton();
        BListBills = new javax.swing.JButton();
        BSendBills = new javax.swing.JButton();
        BRecPay = new javax.swing.JButton();
        BListWaiting = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TFactures = new javax.swing.JTable();
        CBCritere = new javax.swing.JComboBox<>();
        BInvalidateBill = new javax.swing.JButton();
        TFDebut = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        TFFin = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        TFSociete = new javax.swing.JTextField();
        BGenererCles = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Adresse :");

        jLabel2.setText("Port :");

        jLabel3.setText("Utilisateur :");

        jLabel4.setText("Mot de passe :");

        BConnexion.setText("Connexion");
        BConnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BConnexionActionPerformed(evt);
            }
        });

        BDeconnexion.setText("Déconnexion");
        BDeconnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BDeconnexionActionPerformed(evt);
            }
        });

        TFAdresse.setText("127.0.0.1");

        TFPort.setText("55000");

        TFUser.setText("john");

        TFPass.setText("doe");

        TAReponse.setEditable(false);
        TAReponse.setColumns(20);
        TAReponse.setRows(5);
        jScrollPane1.setViewportView(TAReponse);

        BGetNextBill.setText("Obtenir la prochaine facture");
        BGetNextBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BGetNextBillActionPerformed(evt);
            }
        });

        BValidateBill.setText("Valider la facture");
        BValidateBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BValidateBillActionPerformed(evt);
            }
        });

        BListBills.setText("Charger liste des factures");
        BListBills.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BListBillsActionPerformed(evt);
            }
        });

        BSendBills.setText("Envoyer les factures validées");
        BSendBills.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSendBillsActionPerformed(evt);
            }
        });

        BRecPay.setText("Payer la facture sélectionnée");
        BRecPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BRecPayActionPerformed(evt);
            }
        });

        BListWaiting.setText("Charger factures non payées");
        BListWaiting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BListWaitingActionPerformed(evt);
            }
        });

        TFactures.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Identifiant", "Société", "Période", "Validée", "Comptable validateur", "Envoyée", "Payée"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TFactures.setColumnSelectionAllowed(true);
        TFactures.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(TFactures);
        TFactures.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        CBCritere.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Toutes", "Société donnée", "Émises depuis plus d'un mois" }));

        BInvalidateBill.setText("Invalider la facture");
        BInvalidateBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BInvalidateBillActionPerformed(evt);
            }
        });

        TFDebut.setText("1996-09");

        jLabel5.setText("Début de l'intervalle :");

        jLabel6.setText("Fin de l'intervalle :");

        TFFin.setText("2021-09");

        jLabel8.setText("Société :");

        TFSociete.setText("ACME");

        BGenererCles.setText("Générer clés");
        BGenererCles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BGenererClesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TFAdresse)
                            .addComponent(TFPort)
                            .addComponent(TFUser)
                            .addComponent(TFPass)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BGetNextBill, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BValidateBill, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BInvalidateBill, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BSendBills, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BGenererCles)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BConnexion, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BDeconnexion))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(BRecPay)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(CBCritere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(TFSociete, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(TFDebut, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(TFFin, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(BListBills, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BListWaiting, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TFAdresse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TFPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(TFUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(TFPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BDeconnexion)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BConnexion)
                        .addComponent(BGenererCles)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BSendBills)
                    .addComponent(BGetNextBill)
                    .addComponent(BValidateBill)
                    .addComponent(BInvalidateBill))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(TFDebut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TFFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(BListBills)
                    .addComponent(jLabel8)
                    .addComponent(TFSociete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BRecPay)
                    .addComponent(CBCritere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BListWaiting))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BConnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BConnexionActionPerformed
        if(cliSock != null)
            return;
        
        try {
            String adresse = TFAdresse.getText();
            int port = Integer.parseInt(TFPort.getText());
            
            cliSock = new Socket(adresse, port);
            System.out.println(cliSock.getInetAddress().toString());
            
            String chargeUtile;
            String temps = Long.toString((new Date()).getTime());
            String alea = Double.toString(Math.random());
            byte[] msgD;

            String user = TFUser.getText(), password = TFPass.getText();

            System.out.println("Instanciation du message digest");
            Security.addProvider(new BouncyCastleProvider());
            MessageDigest md = MessageDigest.getInstance("SHA-1", RequeteBISAMAP.codeProvider);
            md.update(user.getBytes());
            md.update(password.getBytes());
            md.update(temps.getBytes());
            md.update(alea.getBytes());

            msgD = md.digest();
            chargeUtile = user + "  " + temps + "  " + alea;
            
            oos = new ObjectOutputStream(cliSock.getOutputStream());
            oos.writeObject(new RequeteBISAMAP(RequeteBISAMAP.LOGIN, chargeUtile, msgD));
            oos.flush();
            
            ois = new ObjectInputStream(cliSock.getInputStream());
            ReponseBISAMAP rep = (ReponseBISAMAP)ois.readObject();
            
            if(rep.getCode() == ReponseBISAMAP.LOGIN_OK) {
                TAReponse.setText(" *** Reponse reçue : Connexion réussie");
                
                String[] parser = rep.getChargeUtile().split("  ");
                    
                if(parser.length >= 3) {
                    BigInteger n = new BigInteger(parser[0]);
                    BigInteger p = new BigInteger(parser[1]);
                    BigInteger pubkey_a = new BigInteger(parser[2]);
                    
                    int b = (int) (Math.random() * 100);
                    BigInteger pubkey_b = n.pow(b).remainder(p);

                    String key_b = String.format("%8s", pubkey_a.pow(b).remainder(p).toString()).replace(" ", "0");
                    System.out.println(" *** Clé obtenue = " + key_b);
                    cle = new SecretKeySpec(key_b.getBytes(), "DES");
                    
                    int h = (int) (Math.random() * 100000000);
                    cle_hmac = new SecretKeySpec(String.format("%08d", h).getBytes(), "DES");
                    System.out.println(" *** Clé générée = " + String.format("%08d", h));
                    
                    Cipher chiffrement = Cipher.getInstance("DES/ECB/PKCS5Padding", codeProvider);
                    chiffrement.init(Cipher.ENCRYPT_MODE, cle);

                    byte[] texteClair = String.format("%08d", h).getBytes();
                    byte[] texteCrypte = chiffrement.doFinal(texteClair);
                    System.out.println(" *** Texte crypté = " + new String(texteCrypte));
                    
                    System.out.println("Recuperation de la cle publique");
                    ObjectInputStream cleFichP = new ObjectInputStream(new FileInputStream("xp.ser"));
                    PublicKey cle_publique = (PublicKey) cleFichP.readObject();
                    cleFichP.close();
                    System.out.println("*** Cle publique recuperee = " + cle_publique.toString());
                    
                    byte[] signature = chiffrement.doFinal(cle_publique.getEncoded());
                    
                    oos.writeObject(new RequeteBISAMAP(RequeteBISAMAP.LOGIN, pubkey_b.toString(), texteCrypte, signature));
                    oos.flush();
                    
                    rep = (ReponseBISAMAP)ois.readObject();
                    
                    chiffrement = Cipher.getInstance("DES/ECB/PKCS5Padding", RequeteBISAMAP.codeProvider);
                    chiffrement.init(Cipher.DECRYPT_MODE, cle);
                    
                    texteCrypte = rep.getDonneesCryptees();
                    System.out.println(" *** Texte crypté = " + new String(texteCrypte));
                    texteClair = chiffrement.doFinal(texteCrypte);
                    System.out.println(" *** Texte clair = " + new String(texteClair));
                }
            }
            else if(rep.getCode() == ReponseBISAMAP.WRONG_LOGIN)
                TAReponse.setText(" *** Reponse reçue : Nom d'utilisateur ou mot de passe erroné");
            else if(rep.getCode() == ReponseBISAMAP.ALREADY_LOGGED_IN)
                TAReponse.setText(" *** Reponse reçue : Vous êtes déjà connecté");
            else if(rep.getCode() == ReponseBISAMAP.INVALID_FORMAT)
                TAReponse.setText(" *** Reponse reçue : Le format de la commande est invalide");
            else if(rep.getCode() == ReponseBISAMAP.UNKNOWN_TYPE)
                TAReponse.setText(" *** Reponse reçue : La commande est inconnue");
            else if(rep.getCode() == ReponseBISAMAP.SERVER_FAIL)
                TAReponse.setText(" *** Reponse reçue : Erreur système du serveur");
            else
                TAReponse.setText(" *** Reponse reçue : " + rep.getChargeUtile());
            
            if(rep.getCode() != ReponseBISAMAP.LOGIN_OK) {
                cliSock.close();
                cliSock = null;
            }
        }
        catch (ClassNotFoundException e) {
            TAReponse.setText("--- erreur sur la classe = " + e.getMessage());
        }
        catch (IOException e) {
            TAReponse.setText("--- erreur IO = " + e.getMessage());
        } catch (NoSuchAlgorithmException | NoSuchProviderException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
            TAReponse.setText("--- erreur cryptage = " + e.getMessage());
        }
    }//GEN-LAST:event_BConnexionActionPerformed

    private void BDeconnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BDeconnexionActionPerformed
        if(cliSock != null) {
            try {
                cliSock.close();
                cliSock = null;
            } catch (IOException ex) {
                TAReponse.setText("--- erreur IO = " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_BDeconnexionActionPerformed

    private void BGetNextBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BGetNextBillActionPerformed
        if(cliSock == null)
            return;
        
        // Envoi de la requête
        try {
            oos.writeObject(new RequeteBISAMAP(RequeteBISAMAP.GET_NEXT_BILL, null));
            oos.flush();
            
            ReponseBISAMAP rep = (ReponseBISAMAP)ois.readObject();
            
            if(rep.getCode() == ReponseBISAMAP.GET_NEXT_BILL_OK) {
                TAReponse.setText(" *** Reponse reçue : Facture reçue");
                
                Cipher chiffrement = Cipher.getInstance("DES/ECB/PKCS5Padding", RequeteBISAMAP.codeProvider);
                chiffrement.init(Cipher.DECRYPT_MODE, cle);

                byte[] texteCrypte = rep.getDonneesCryptees();
                System.out.println(" *** Texte crypté = " + new String(texteCrypte));
                byte[] texteClair = chiffrement.doFinal(texteCrypte);
                System.out.println(" *** Texte clair = " + new String(texteClair));

                String[] parser = new String(texteClair).split("  ");
                
                DefaultTableModel model = (DefaultTableModel)TFactures.getModel();
                model.setRowCount(0);
                model.addRow(parser);
            }
            else if(rep.getCode() == ReponseBISAMAP.NO_BILL)
                TAReponse.setText(" *** Reponse reçue : Aucune facture à valider");
            else if(rep.getCode() == ReponseBISAMAP.NOT_LOGGED_IN)
                TAReponse.setText(" *** Reponse reçue : Vous n'êtes pas connecté");
            else if(rep.getCode() == ReponseBISAMAP.INVALID_FORMAT)
                TAReponse.setText(" *** Reponse reçue : Le format de la commande est invalide");
            else if(rep.getCode() == ReponseBISAMAP.UNKNOWN_TYPE)
                TAReponse.setText(" *** Reponse reçue : La commande est inconnue");
            else if(rep.getCode() == ReponseBISAMAP.SERVER_FAIL)
                TAReponse.setText(" *** Reponse reçue : Erreur système du serveur");
            else
                TAReponse.setText(" *** Reponse reçue : " + rep.getChargeUtile());
        }
        catch (ClassNotFoundException e) {
            TAReponse.setText("--- erreur sur la classe = " + e.getMessage());
        }
        catch (IOException e) {
            TAReponse.setText("--- erreur IO = " + e.getMessage());
        } catch (NoSuchAlgorithmException | NoSuchProviderException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
            TAReponse.setText("--- erreur cryptage = " + e.getMessage());
        }
    }//GEN-LAST:event_BGetNextBillActionPerformed

    private void BValidateBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BValidateBillActionPerformed
        if(cliSock == null)
            return;
        
        // Envoi de la requête
        try {
            System.out.println("Recuperation de la cle privee");
            ObjectInputStream cléFichS = new ObjectInputStream(new FileInputStream("xs.ser"));
            PrivateKey cle_privee = (PrivateKey) cléFichS.readObject();
            cléFichS.close();
            System.out.println(" *** Cle privee recuperee = " + cle_privee.toString());

            String cu = "V  " + TFactures.getValueAt(TFactures.getSelectedRow(), 0);
            
            System.out.println("Instanciation de la signature");
            Signature s = Signature. getInstance("SHA1withRSA", codeProvider);
            System.out.println("Initialisation de la signature");
            s.initSign(cle_privee);
            System.out.println("Hachage du message");
            s.update(cu.getBytes());
            System.out.println("Generation des bytes");
            byte[] signature = s.sign();
            System.out.println("Termine : signature construite");
            System.out.println("Signature = " + new String(signature));
            System.out.println("Longueur de la signature = " + signature.length);
            System.out.println("Envoi du message et de la signature");
            
            oos.writeObject(new RequeteBISAMAP(RequeteBISAMAP.VALIDATE_BILL, cu, null, signature));
            oos.flush();
            
            ReponseBISAMAP rep = (ReponseBISAMAP)ois.readObject();
            
            if(rep.getCode() == ReponseBISAMAP.VALIDATE_BILL_OK)
                TAReponse.setText(" *** Reponse reçue : Facture validée");
            else if(rep.getCode() == ReponseBISAMAP.BAD_SIGNATURE)
                TAReponse.setText(" *** Reponse reçue : La signature n'est pas correcte");
            else if(rep.getCode() == ReponseBISAMAP.NOT_LOGGED_IN)
                TAReponse.setText(" *** Reponse reçue : Vous n'êtes pas connecté");
            else if(rep.getCode() == ReponseBISAMAP.INVALID_FORMAT)
                TAReponse.setText(" *** Reponse reçue : Le format de la commande est invalide");
            else if(rep.getCode() == ReponseBISAMAP.UNKNOWN_TYPE)
                TAReponse.setText(" *** Reponse reçue : La commande est inconnue");
            else if(rep.getCode() == ReponseBISAMAP.SERVER_FAIL)
                TAReponse.setText(" *** Reponse reçue : Erreur système du serveur");
            else
                TAReponse.setText(" *** Reponse reçue : " + rep.getChargeUtile());
        }
        catch (ClassNotFoundException e) {
            TAReponse.setText("--- erreur sur la classe = " + e.getMessage());
        }
        catch (IOException e) {
            TAReponse.setText("--- erreur IO = " + e.getMessage());
        }
        catch (NoSuchAlgorithmException | NoSuchProviderException | InvalidKeyException | SignatureException e) {
            TAReponse.setText("--- erreur signature = " + e.getMessage());
        }
    }//GEN-LAST:event_BValidateBillActionPerformed

    private void BInvalidateBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BInvalidateBillActionPerformed
        if(cliSock == null)
            return;
        
        // Envoi de la requête
        try {
            System.out.println("Recuperation de la cle privee");
            ObjectInputStream cléFichS = new ObjectInputStream(new FileInputStream("xs.ser"));
            PrivateKey cle_privee = (PrivateKey) cléFichS.readObject();
            cléFichS.close();
            System.out.println(" *** Cle privee recuperee = " + cle_privee.toString());

            String cu = "I  " + TFactures.getValueAt(TFactures.getSelectedRow(), 0);
            
            System.out.println("Instanciation de la signature");
            Signature s = Signature. getInstance("SHA1withRSA", codeProvider);
            System.out.println("Initialisation de la signature");
            s.initSign(cle_privee);
            System.out.println("Hachage du message");
            s.update(cu.getBytes());
            System.out.println("Generation des bytes");
            byte[] signature = s.sign();
            System.out.println("Termine : signature construite");
            System.out.println("Signature = " + new String(signature));
            System.out.println("Longueur de la signature = " + signature.length);
            System.out.println("Envoi du message et de la signature");
            
            oos.writeObject(new RequeteBISAMAP(RequeteBISAMAP.VALIDATE_BILL, cu, null, signature));
            oos.flush();
            
            ReponseBISAMAP rep = (ReponseBISAMAP)ois.readObject();
            
            if(rep.getCode() == ReponseBISAMAP.VALIDATE_BILL_OK)
                TAReponse.setText(" *** Reponse reçue : Facture invalidée");
            else if(rep.getCode() == ReponseBISAMAP.BAD_SIGNATURE)
                TAReponse.setText(" *** Reponse reçue : La signature n'est pas correcte");
            else if(rep.getCode() == ReponseBISAMAP.NOT_LOGGED_IN)
                TAReponse.setText(" *** Reponse reçue : Vous n'êtes pas connecté");
            else if(rep.getCode() == ReponseBISAMAP.INVALID_FORMAT)
                TAReponse.setText(" *** Reponse reçue : Le format de la commande est invalide");
            else if(rep.getCode() == ReponseBISAMAP.UNKNOWN_TYPE)
                TAReponse.setText(" *** Reponse reçue : La commande est inconnue");
            else if(rep.getCode() == ReponseBISAMAP.SERVER_FAIL)
                TAReponse.setText(" *** Reponse reçue : Erreur système du serveur");
            else
                TAReponse.setText(" *** Reponse reçue : " + rep.getChargeUtile());
        }
        catch (ClassNotFoundException e) {
            TAReponse.setText("--- erreur sur la classe = " + e.getMessage());
        }
        catch (IOException e) {
            TAReponse.setText("--- erreur IO = " + e.getMessage());
        }
        catch (NoSuchAlgorithmException | NoSuchProviderException | InvalidKeyException | SignatureException e) {
            TAReponse.setText("--- erreur signature = " + e.getMessage());
        }
    }//GEN-LAST:event_BInvalidateBillActionPerformed

    private void BSendBillsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSendBillsActionPerformed
        if(cliSock == null)
            return;
        
        // Envoi de la requête
        try {
            System.out.println("Recuperation de la cle privee");
            ObjectInputStream cléFichS = new ObjectInputStream(new FileInputStream("xs.ser"));
            PrivateKey cle_privee = (PrivateKey) cléFichS.readObject();
            cléFichS.close();
            System.out.println(" *** Cle privee recuperee = " + cle_privee.toString());
            
            String cu = "";
            
            System.out.println("Instanciation de la signature");
            Signature s = Signature. getInstance("SHA1withRSA", codeProvider);
            System.out.println("Initialisation de la signature");
            s.initSign(cle_privee);
            System.out.println("Hachage du message");
            s.update(cu.getBytes());
            System.out.println("Generation des bytes");
            byte[] signature = s.sign();
            System.out.println("Termine : signature construite");
            System.out.println("Signature = " + new String(signature));
            System.out.println("Longueur de la signature = " + signature.length);
            System.out.println("Envoi du message et de la signature");
            
            oos.writeObject(new RequeteBISAMAP(RequeteBISAMAP.SEND_BILLS, cu, null, signature));
            oos.flush();
            
            ReponseBISAMAP rep = (ReponseBISAMAP)ois.readObject();
            
            if(rep.getCode() == ReponseBISAMAP.SEND_BILLS_OK)
                TAReponse.setText(" *** Reponse reçue : Factures envoyées");
            else if(rep.getCode() == ReponseBISAMAP.BAD_SIGNATURE)
                TAReponse.setText(" *** Reponse reçue : La signature n'est pas correcte");
            else if(rep.getCode() == ReponseBISAMAP.NOT_LOGGED_IN)
                TAReponse.setText(" *** Reponse reçue : Vous n'êtes pas connecté");
            else if(rep.getCode() == ReponseBISAMAP.INVALID_FORMAT)
                TAReponse.setText(" *** Reponse reçue : Le format de la commande est invalide");
            else if(rep.getCode() == ReponseBISAMAP.UNKNOWN_TYPE)
                TAReponse.setText(" *** Reponse reçue : La commande est inconnue");
            else if(rep.getCode() == ReponseBISAMAP.SERVER_FAIL)
                TAReponse.setText(" *** Reponse reçue : Erreur système du serveur");
            else
                TAReponse.setText(" *** Reponse reçue : " + rep.getChargeUtile());
        }
        catch (ClassNotFoundException e) {
            TAReponse.setText("--- erreur sur la classe = " + e.getMessage());
        }
        catch (IOException e) {
            TAReponse.setText("--- erreur IO = " + e.getMessage());
        }
        catch (NoSuchAlgorithmException | NoSuchProviderException | InvalidKeyException | SignatureException e) {
            TAReponse.setText("--- erreur signature = " + e.getMessage());
        }
    }//GEN-LAST:event_BSendBillsActionPerformed

    private void BListBillsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BListBillsActionPerformed
        if(cliSock == null)
            return;
        
        // Envoi de la requête
        try {
            System.out.println("Recuperation de la cle privee");
            ObjectInputStream cléFichS = new ObjectInputStream(new FileInputStream("xs.ser"));
            PrivateKey cle_privee = (PrivateKey) cléFichS.readObject();
            cléFichS.close();
            System.out.println(" *** Cle privee recuperee = " + cle_privee.toString());
            
            String cu = TFSociete.getText() + "  " + TFDebut.getText() + "  " + TFFin.getText();
            
            System.out.println("Instanciation de la signature");
            Signature s = Signature. getInstance("SHA1withRSA", codeProvider);
            System.out.println("Initialisation de la signature");
            s.initSign(cle_privee);
            System.out.println("Hachage du message");
            s.update(cu.getBytes());
            System.out.println("Generation des bytes");
            byte[] signature = s.sign();
            System.out.println("Termine : signature construite");
            System.out.println("Signature = " + new String(signature));
            System.out.println("Longueur de la signature = " + signature.length);
            System.out.println("Envoi du message et de la signature");
            
            oos.writeObject(new RequeteBISAMAP(RequeteBISAMAP.LIST_BILLS, cu, null, signature));
            oos.flush();
            
            ReponseBISAMAP rep = (ReponseBISAMAP)ois.readObject();
            
            if(rep.getCode() == ReponseBISAMAP.LIST_BILLS_OK) {
                TAReponse.setText(" *** Reponse reçue : Liste des factures reçue");
                
                Cipher chiffrement = Cipher.getInstance("DES/ECB/PKCS5Padding", RequeteBISAMAP.codeProvider);
                chiffrement.init(Cipher.DECRYPT_MODE, cle);

                byte[] texteCrypte = rep.getDonneesCryptees();
                System.out.println(" *** Texte crypté = " + new String(texteCrypte));
                byte[] texteClair = chiffrement.doFinal(texteCrypte);
                System.out.println(" *** Texte clair = " + new String(texteClair));
                
                String chu = new String(texteClair);
                String[] parser = chu.split("::");
                
                DefaultTableModel model = (DefaultTableModel)TFactures.getModel();
                model.setRowCount(0);
                if(parser.length >= 2) {
                    for (String row : parser)
                        model.addRow(row.split("  "));
                }
                else
                    model.addRow(chu.split("  "));
            }
            else if(rep.getCode() == ReponseBISAMAP.BAD_SIGNATURE)
                TAReponse.setText(" *** Reponse reçue : La signature n'est pas correcte");
            else if(rep.getCode() == ReponseBISAMAP.NOT_LOGGED_IN)
                TAReponse.setText(" *** Reponse reçue : Vous n'êtes pas connecté");
            else if(rep.getCode() == ReponseBISAMAP.INVALID_FORMAT)
                TAReponse.setText(" *** Reponse reçue : Le format de la commande est invalide");
            else if(rep.getCode() == ReponseBISAMAP.UNKNOWN_TYPE)
                TAReponse.setText(" *** Reponse reçue : La commande est inconnue");
            else if(rep.getCode() == ReponseBISAMAP.SERVER_FAIL)
                TAReponse.setText(" *** Reponse reçue : Erreur système du serveur");
            else
                TAReponse.setText(" *** Reponse reçue : " + rep.getChargeUtile());
        }
        catch (ClassNotFoundException e) {
            TAReponse.setText("--- erreur sur la classe = " + e.getMessage());
        }
        catch (IOException e) {
            TAReponse.setText("--- erreur IO = " + e.getMessage());
        } catch (NoSuchAlgorithmException | NoSuchProviderException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
            TAReponse.setText("--- erreur cryptage = " + e.getMessage());
        } catch (SignatureException e) {
            TAReponse.setText("--- erreur signature = " + e.getMessage());
        }
    }//GEN-LAST:event_BListBillsActionPerformed

    private void BRecPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BRecPayActionPerformed
        if(cliSock == null)
            return;
        
        try {
            Cipher chiffrement = Cipher.getInstance("DES/ECB/PKCS5Padding", codeProvider);
            chiffrement.init(Cipher.ENCRYPT_MODE, cle);
            String id = (String) TFactures.getValueAt(TFactures.getSelectedRow(), 0);
            byte[] texteClair = id.getBytes();
            byte[] texteCrypte = chiffrement.doFinal(texteClair);
            System.out.println(" *** Texte crypté = " + new String(texteCrypte));
            
            System.out.println("Instanciation du HMAC");
            Mac hmac = Mac.getInstance("HMAC-MD5", codeProvider);
            hmac.init(cle_hmac);
            System.out.println("Hachage du message");
            hmac.update(texteCrypte);
            System.out.println("Generation des bytes");
            byte[] hb = hmac.doFinal();
            System.out.println("Termine : HMAC construit");
            System.out.println("HMAC = " + new String(hb));
            System.out.println("Longueur du HMAC = " + hb.length);
            
            oos.writeObject(new RequeteBISAMAP(RequeteBISAMAP.REC_PAY, null, texteCrypte, hb));
            oos.flush();
            
            ReponseBISAMAP rep = (ReponseBISAMAP)ois.readObject();
            
            if(rep.getCode() == ReponseBISAMAP.REC_PAY_OK)
                TAReponse.setText(" *** Reponse reçue : Facture payée");
            else if(rep.getCode() == ReponseBISAMAP.BAD_SIGNATURE)
                TAReponse.setText(" *** Reponse reçue : La signature n'est pas correcte");
            else if(rep.getCode() == ReponseBISAMAP.NOT_LOGGED_IN)
                TAReponse.setText(" *** Reponse reçue : Vous n'êtes pas connecté");
            else if(rep.getCode() == ReponseBISAMAP.INVALID_FORMAT)
                TAReponse.setText(" *** Reponse reçue : Le format de la commande est invalide");
            else if(rep.getCode() == ReponseBISAMAP.UNKNOWN_TYPE)
                TAReponse.setText(" *** Reponse reçue : La commande est inconnue");
            else if(rep.getCode() == ReponseBISAMAP.SERVER_FAIL)
                TAReponse.setText(" *** Reponse reçue : Erreur système du serveur");
            else
                TAReponse.setText(" *** Reponse reçue : " + rep.getChargeUtile());
        }
        catch (ClassNotFoundException e) {
            TAReponse.setText("--- erreur sur la classe = " + e.getMessage());
        }
        catch (IOException e) {
            TAReponse.setText("--- erreur IO = " + e.getMessage());
        }
        catch (NoSuchAlgorithmException | NoSuchProviderException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
            TAReponse.setText("--- erreur cryptage = " + e.getMessage());
        }
    }//GEN-LAST:event_BRecPayActionPerformed

    private void BListWaitingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BListWaitingActionPerformed
        if(cliSock == null)
            return;
        
        // Envoi de la requête
        try {
            System.out.println("Recuperation de la cle privee");
            ObjectInputStream cléFichS = new ObjectInputStream(new FileInputStream("xs.ser"));
            PrivateKey cle_privee = (PrivateKey) cléFichS.readObject();
            cléFichS.close();
            System.out.println(" *** Cle privee recuperee = " + cle_privee.toString());
            
            String cu = "T";
            
            System.out.println("Instanciation de la signature");
            Signature s = Signature. getInstance("SHA1withRSA", codeProvider);
            System.out.println("Initialisation de la signature");
            s.initSign(cle_privee);
            System.out.println("Hachage du message");
            s.update(cu.getBytes());
            System.out.println("Generation des bytes");
            byte[] signature = s.sign();
            System.out.println("Termine : signature construite");
            System.out.println("Signature = " + new String(signature));
            System.out.println("Longueur de la signature = " + signature.length);
            System.out.println("Envoi du message et de la signature");
            
            oos.writeObject(new RequeteBISAMAP(RequeteBISAMAP.LIST_WAITING, "T", null, signature));
            oos.flush();
            
            ReponseBISAMAP rep = (ReponseBISAMAP)ois.readObject();
            
            if(rep.getCode() == ReponseBISAMAP.LIST_WAITING_OK) {
                TAReponse.setText(" *** Reponse reçue : Liste des factures non payées reçue");
                
                Cipher chiffrement = Cipher.getInstance("DES/ECB/PKCS5Padding", RequeteBISAMAP.codeProvider);
                chiffrement.init(Cipher.DECRYPT_MODE, cle);

                byte[] texteCrypte = rep.getDonneesCryptees();
                System.out.println(" *** Texte crypté = " + new String(texteCrypte));
                byte[] texteClair = chiffrement.doFinal(texteCrypte);
                System.out.println(" *** Texte clair = " + new String(texteClair));
                
                String chu = new String(texteClair);
                String[] parser = chu.split("::");
                
                DefaultTableModel model = (DefaultTableModel)TFactures.getModel();
                model.setRowCount(0);
                if(parser.length >= 2) {
                    for (String row : parser)
                        model.addRow(row.split("  "));
                }
                else
                    model.addRow(chu.split("  "));
            }
            else if(rep.getCode() == ReponseBISAMAP.BAD_SIGNATURE)
                TAReponse.setText(" *** Reponse reçue : La signature n'est pas correcte");
            else if(rep.getCode() == ReponseBISAMAP.NOT_LOGGED_IN)
                TAReponse.setText(" *** Reponse reçue : Vous n'êtes pas connecté");
            else if(rep.getCode() == ReponseBISAMAP.INVALID_FORMAT)
                TAReponse.setText(" *** Reponse reçue : Le format de la commande est invalide");
            else if(rep.getCode() == ReponseBISAMAP.UNKNOWN_TYPE)
                TAReponse.setText(" *** Reponse reçue : La commande est inconnue");
            else if(rep.getCode() == ReponseBISAMAP.SERVER_FAIL)
                TAReponse.setText(" *** Reponse reçue : Erreur système du serveur");
            else
                TAReponse.setText(" *** Reponse reçue : " + rep.getChargeUtile());
        }
        catch (ClassNotFoundException e) {
            TAReponse.setText("--- erreur sur la classe = " + e.getMessage());
        }
        catch (IOException e) {
            TAReponse.setText("--- erreur IO = " + e.getMessage());
        } catch (NoSuchAlgorithmException | NoSuchProviderException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
            TAReponse.setText("--- erreur cryptage = " + e.getMessage());
        } catch (SignatureException e) {
            TAReponse.setText("--- erreur signature = " + e.getMessage());
        }
    }//GEN-LAST:event_BListWaitingActionPerformed

    private void BGenererClesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BGenererClesActionPerformed
        String codeProvider = "BC"; //CryptixCrypto";
        SecureRandom prng = new SecureRandom();
        
        try {
            Security.addProvider(new BouncyCastleProvider());
            
// Génération des clés
            System.out.println("Tentative d'obtention d'un generateur de cle");
            KeyPairGenerator genCles = KeyPairGenerator.getInstance("RSA", codeProvider);
            
            System.out.println("Tentative d'initialisation du generateur de cle");
            int se = 512; // par exemple
            genCles.initialize(se, prng);
            
            System.out.println("Tentative d'obtention de cles");
            KeyPair deuxCles = genCles.generateKeyPair();
            PublicKey cléPublique = deuxCles.getPublic();
            PrivateKey cléPrivee = deuxCles.getPrivate();
            System.out.println(" *** Cle publique generee = " + cléPublique);
            System.out.println(" *** Cle privee generee = " + cléPrivee);
            
// Sérialisation de clés
            System.out.println(" *** Cle publique generee serialisee");
            ObjectOutputStream cléPubliqueFich = new ObjectOutputStream(new FileOutputStream("xp.ser"));
            System.out.println("fichier ouvert");
            cléPubliqueFich.writeObject(cléPublique);
            System.out.println("cle ecrite");
            cléPubliqueFich.close();
            
            System.out.println(" *** Cle privee generee serialisee");
            ObjectOutputStream cléPrivéeFich = new ObjectOutputStream(new FileOutputStream("xs.ser"));
            cléPrivéeFich.writeObject(cléPrivee);
            cléPrivéeFich.close();
            
            TAReponse.setText("Clés générées");
        } catch (IOException ex) {
            TAReponse.setText("--- erreur IO = " + ex.getMessage());
        } catch (NoSuchAlgorithmException | NoSuchProviderException ex) {
            TAReponse.setText("--- erreur cryptage = " + ex.getMessage());
        }
    }//GEN-LAST:event_BGenererClesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application_Compta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application_Compta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application_Compta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application_Compta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Application_Compta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BConnexion;
    private javax.swing.JButton BDeconnexion;
    private javax.swing.JButton BGenererCles;
    private javax.swing.JButton BGetNextBill;
    private javax.swing.JButton BInvalidateBill;
    private javax.swing.JButton BListBills;
    private javax.swing.JButton BListWaiting;
    private javax.swing.JButton BRecPay;
    private javax.swing.JButton BSendBills;
    private javax.swing.JButton BValidateBill;
    private javax.swing.JComboBox<String> CBCritere;
    private javax.swing.JTextArea TAReponse;
    private javax.swing.JTextField TFAdresse;
    private javax.swing.JTextField TFDebut;
    private javax.swing.JTextField TFFin;
    private javax.swing.JTextField TFPass;
    private javax.swing.JTextField TFPort;
    private javax.swing.JTextField TFSociete;
    private javax.swing.JTextField TFUser;
    private javax.swing.JTable TFactures;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
