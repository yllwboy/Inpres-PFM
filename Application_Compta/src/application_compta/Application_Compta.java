/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package application_compta;

import ProtocoleBISAMAP.*;
import java.io.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.*;
import java.security.*;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

/**
 *
 * @author hector
 */
public class Application_Compta extends javax.swing.JFrame {
    
    private ObjectInputStream ois;
    private ObjectOutputStream oos;
    private Socket cliSock = null;
    private SecretKey cle = null;
    
    /**
     * Creates new form Application_Compta
     */
    public Application_Compta() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        BConnexion = new javax.swing.JButton();
        BDeconnexion = new javax.swing.JButton();
        TFAdresse = new javax.swing.JTextField();
        TFPort = new javax.swing.JTextField();
        TFUser = new javax.swing.JTextField();
        TFPass = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TAReponse = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Adresse :");

        jLabel2.setText("Port :");

        jLabel3.setText("Utilisateur :");

        jLabel4.setText("Mot de passe :");

        BConnexion.setText("Connexion");
        BConnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BConnexionActionPerformed(evt);
            }
        });

        BDeconnexion.setText("Déconnexion");
        BDeconnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BDeconnexionActionPerformed(evt);
            }
        });

        TFAdresse.setText("127.0.0.1");

        TFPort.setText("55000");

        TFUser.setText("john");

        TFPass.setText("doe");

        TAReponse.setEditable(false);
        TAReponse.setColumns(20);
        TAReponse.setRows(5);
        jScrollPane1.setViewportView(TAReponse);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(BConnexion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BDeconnexion))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TFAdresse)
                            .addComponent(TFPort)
                            .addComponent(TFUser)
                            .addComponent(TFPass))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TFAdresse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TFPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(TFUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(TFPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BConnexion)
                    .addComponent(BDeconnexion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BConnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BConnexionActionPerformed
        if(cliSock != null)
            return;
        
        String adresse = TFAdresse.getText();
        int port = Integer.parseInt(TFPort.getText());
        
        try {
            cliSock = new Socket(adresse, port);
            System.out.println(cliSock.getInetAddress().toString());
        }
        catch (UnknownHostException e) {
            TAReponse.setText("Erreur ! Host non trouvé [" + e + "]");
            return;
        }
        catch (IOException e) {
            TAReponse.setText("Erreur ! Pas de connexion ? [" + e + "]");
            return;
        }
        
        String chargeUtile;
        String temps = Long.toString((new Date()).getTime());
        String alea = Double.toString(Math.random());
        byte[] msgD;

        try {
            String user = TFUser.getText(), password = TFPass.getText();

            System.out.println("Instanciation du message digest");
            Security.addProvider(new BouncyCastleProvider());
            MessageDigest md = MessageDigest.getInstance("SHA-1", RequeteBISAMAP.codeProvider);
            md.update(user.getBytes());
            md.update(password.getBytes());
            md.update(temps.getBytes());
            md.update(alea.getBytes());

            msgD = md.digest();
            chargeUtile = user + "  " + temps + "  " + alea;

        } catch (NoSuchAlgorithmException | NoSuchProviderException  ex) {
            TAReponse.setText("Erreur ! [" + ex.getMessage() + "]");
            return;
        }
        
        RequeteBISAMAP req = new RequeteBISAMAP(RequeteBISAMAP.LOGIN, chargeUtile, msgD);
        
        // Envoi de la requête
        try {
            oos = new ObjectOutputStream(cliSock.getOutputStream());
            oos.writeObject(req);
            oos.flush();
        }
        catch (IOException e) {
            TAReponse.setText("Erreur réseau ? [" + e.getMessage() + "]");
        }
        
        // Lecture de la réponse
        ReponseBISAMAP rep = null;
        try {
            ois = new ObjectInputStream(cliSock.getInputStream());
            rep = (ReponseBISAMAP)ois.readObject();
            
            if(rep.getCode() == ReponseBISAMAP.LOGIN_OK) {
                TAReponse.setText(" *** Reponse reçue : Connexion réussie");
                
                String[] parser = rep.getChargeUtile().split("  ");
                    
                if(parser.length >= 3) {
                    BigInteger n = new BigInteger(parser[0]);
                    BigInteger p = new BigInteger(parser[1]);
                    BigInteger pubkey_a = new BigInteger(parser[2]);
                    
                    int b = (int) (Math.random() * 100);
                    BigInteger pubkey_b = n.pow(b).remainder(p);

                    req = new RequeteBISAMAP(RequeteBISAMAP.LOGIN, pubkey_b.toString());
                    oos.writeObject(req);
                    oos.flush();
                    
                    BigInteger key_b = pubkey_a.pow(b).remainder(p).remainder(new BigInteger("100000000"));
                    System.out.println(" *** Clé obtenue = " + key_b.toString());
                    cle = new SecretKeySpec(key_b.toString().getBytes(), "DES");
                    
                    rep = (ReponseBISAMAP)ois.readObject();
                    
                    Cipher chiffrement = Cipher.getInstance("DES/ECB/PKCS5Padding", RequeteBISAMAP.codeProvider);
                    chiffrement.init(Cipher.DECRYPT_MODE, cle);
                    
                    byte[] texteCrypte = rep.getDonneesCryptees();
                    System.out.println(" *** Texte crypté = " + new String(texteCrypte));
                    byte[] texteClair = chiffrement.doFinal(texteCrypte);
                    System.out.println(" *** Texte clair = " + new String(texteClair));
                }
            }
            else if(rep.getCode() == ReponseBISAMAP.WRONG_LOGIN)
                TAReponse.setText(" *** Reponse reçue : Nom d'utilisateur ou mot de passe erroné");
            else if(rep.getCode() == ReponseBISAMAP.ALREADY_LOGGED_IN)
                TAReponse.setText(" *** Reponse reçue : Vous êtes déjà connecté");
            else if(rep.getCode() == ReponseBISAMAP.INVALID_FORMAT)
                TAReponse.setText(" *** Reponse reçue : Le format de la commande est invalide");
            else if(rep.getCode() == ReponseBISAMAP.UNKNOWN_TYPE)
                TAReponse.setText(" *** Reponse reçue : La commande est inconnue");
            else if(rep.getCode() == ReponseBISAMAP.SERVER_FAIL)
                TAReponse.setText(" *** Reponse reçue : Erreur système du serveur");
            else
                TAReponse.setText(" *** Reponse reçue : " + rep.getChargeUtile());
            
            if(rep.getCode() != ReponseBISAMAP.LOGIN_OK) {
                cliSock.close();
                cliSock = null;
            }
        }
        catch (ClassNotFoundException e) {
            TAReponse.setText("--- erreur sur la classe = " + e.getMessage());
        }
        catch (IOException e) {
            TAReponse.setText("--- erreur IO = " + e.getMessage());
        } catch (NoSuchAlgorithmException | NoSuchProviderException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
            TAReponse.setText("--- erreur cryptage = " + e.getMessage());
        }
    }//GEN-LAST:event_BConnexionActionPerformed

    private void BDeconnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BDeconnexionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BDeconnexionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application_Compta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application_Compta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application_Compta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application_Compta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Application_Compta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BConnexion;
    private javax.swing.JButton BDeconnexion;
    private javax.swing.JTextArea TAReponse;
    private javax.swing.JTextField TFAdresse;
    private javax.swing.JTextField TFPass;
    private javax.swing.JTextField TFPort;
    private javax.swing.JTextField TFUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
